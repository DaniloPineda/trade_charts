services:
  # --- Servicio de Redis ---
  redis:
    image: "redis:alpine" # Usamos la imagen oficial y ligera de Redis
    container_name: trade_charts_redis
    ports:
      - "6379:6379" # Mapeamos el puerto para poder conectarnos desde fuera si es necesario

  # --- Servicio del Backend (Django) ---

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: trade_charts_backend
    command: daphne -b 0.0.0.0 -p 8000 trade_charts.asgi:application
    ports:
      - "8000:8000"
    environment:
      - REDIS_HOST=redis
    depends_on:
      - redis
    volumes:
      - .:/app
      - ./backend:/app/backend

  # --- Servicio del Frontend (React) ---
  frontend:
    build: ./frontend
    container_name: trade_charts_frontend
    volumes:
      # Sincroniza tu código para hot-reloading
      - ./frontend:/app/frontend
      # Crea un "volumen anónimo" para node_modules, aislando la carpeta
      # del contenedor y evitando que sea sobrescrita por el montaje anterior.
      - /app/frontend/node_modules
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    depends_on:
      - backend

  # --- Nuevo servicio para el simulador de Ticks ---
  ticker:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: trade_charts_ticker
    # Llama directamente al comando de management
    command: python manage.py start_ticker
    volumes:
      - ./backend:/app/backend
    depends_on:
      - redis
      - backend
