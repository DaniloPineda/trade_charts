services:
  # --- Servicio de Redis ---
  redis:
    image: "redis:alpine" # Usamos la imagen oficial y ligera de Redis
    container_name: trade_charts_redis
    ports:
      - "6379:6379" # Mapeamos el puerto para poder conectarnos desde fuera si es necesario

  # --- Servicio del Backend (Django) ---
  backend:
    build: ./backend # Le dice a Compose que construya la imagen desde la carpeta ./backend
    container_name: trade_charts_backend
    command: daphne -b 0.0.0.0 -p 8000 asgi:application
    volumes:
      - ./backend:/app/backend # Sincroniza tu c칩digo local con el del contenedor para hot-reloading
    ports:
      - "8000:8000" # Mapea el puerto 8000 del contenedor a tu m치quina local
    depends_on:
      - redis # Le dice a Docker que inicie Redis ANTES que el backend

  # --- Servicio del Frontend (React) ---
  frontend:
    build: ./frontend
    container_name: trade_charts_frontend
    volumes:
      # Sincroniza tu c칩digo para hot-reloading
      - ./frontend:/app/frontend
      # Crea un "volumen an칩nimo" para node_modules, aislando la carpeta
      # del contenedor y evitando que sea sobrescrita por el montaje anterior.
      - /app/frontend/node_modules
    ports:
      - "3000:3000"
    environment:
      # Ayuda a que el hot-reloading de React funcione mejor con Docker
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend

  # --- Nuevo servicio para el simulador de Ticks ---
  # ticker:
  #   build: ./backend
  #   container_name: trade_charts_ticker
  #   # Llama directamente al comando de management
  #   command: python manage.py start_ticker
  #   volumes:
  #     - ./backend:/app/backend
  #   depends_on:
  #     - redis
  #     - backend
